============================= test session starts ==============================
platform linux -- Python 3.7.3, pytest-6.2.3, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore/.hypothesis/examples')
rootdir: /tmp_amd/kamen/export/kamen/3/cs1531/automark/tempstore, configfile: pytest.ini
plugins: forked-1.3.0, xdist-2.2.1, hypothesis-6.1.1, timeout-1.4.2
collecting ... collected 343 items

http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action FAILED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_messages_correct_format PASSED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_profile_still_fetchable PASSED [  0%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_channel PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_removed_from_dm PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_removal_not_in_users_all PASSED [  1%]
http_tests/admin_tests/test_admin_user_remove.py::test_email_handle_reusable SKIPPED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_user PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_last_owner PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_cannot_remove_user_nonowner PASSED [  2%]
http_tests/admin_tests/test_admin_user_remove.py::test_invalid_token PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_successful_permission_change PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_changing_to_same_permission_idempotent PASSED [  3%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_nonowner_cant_change_permissions PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_user PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_permission PASSED [  4%]
http_tests/admin_tests/test_admin_userpermission_change.py::test_invalid_token PASSED [  4%]
http_tests/auth_tests/test_auth_login.py::test_successful_login PASSED   [  5%]
http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions FAILED [  5%]
http_tests/auth_tests/test_auth_login.py::test_unregistered_user PASSED  [  5%]
http_tests/auth_tests/test_auth_login.py::test_registered_but_incorrect_password PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_successful_logout PASSED [  6%]
http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout FAILED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[--12345-@gmail.com] PASSED [  6%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[--12345-bob] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[--12345-bob@bob@bob.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[---@gmail.com] PASSED [  7%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[---bob] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[---bob@bob@bob.com] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-@gmail.com] PASSED [  8%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob@bob@bob.com] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--@gmail.com] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob] PASSED [  9%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob@bob@bob.com] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb--12345-@gmail.com] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb--12345-bob] PASSED [ 10%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb--12345-bob@bob@bob.com] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb---@gmail.com] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb---bob] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb---bob@bob@bob.com] PASSED [ 11%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-@gmail.com] PASSED [ 12%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob] PASSED [ 12%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa-12345-bob@bob@bob.com] PASSED [ 12%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--@gmail.com] PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob] PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_invalid_inputs[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb-aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa--bob@bob@bob.com] PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_duplicate_email PASSED [ 13%]
http_tests/auth_tests/test_auth_register.py::test_successful_registration PASSED [ 14%]
http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[Bob-Smith-bobsmith] PASSED [ 14%]
http_tests/auth_tests/test_auth_register.py::test_handle_generation_unique[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 14%]
http_tests/auth_tests/test_auth_register.py::test_handle_generation_duplicate PASSED [ 15%]
http_tests/auth_tests/test_passwordreset_request.py::test_return_format_correct PASSED [ 15%]
http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere FAILED [ 15%]
http_tests/auth_tests/test_passwordreset_request.py::test_email_sent SKIPPED [ 16%]
http_tests/auth_tests/test_passwordreset_reset.py::test_invalid_password PASSED [ 16%]
http_tests/auth_tests/test_passwordreset_reset.py::test_invalid_reset_code PASSED [ 16%]
http_tests/channel_tests/test_channel_addowner.py::test_global_owner_non_member_can_addowner SKIPPED [ 16%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_member PASSED [ 17%]
http_tests/channel_tests/test_channel_addowner.py::test_channel_owner_can_addowner_when_non_member SKIPPED [ 17%]
http_tests/channel_tests/test_channel_addowner.py::test_non_member_cannot_add_owner PASSED [ 17%]
http_tests/channel_tests/test_channel_addowner.py::test_member_cannot_add_owner PASSED [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_cannot_addowner_prexisting_channel_owner PASSED [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_u_id SKIPPED [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_with_invalid_channel_id PASSED [ 18%]
http_tests/channel_tests/test_channel_addowner.py::test_invalid_token PASSED [ 19%]
http_tests/channel_tests/test_channel_details.py::test_member_successful FAILED [ 19%]
http_tests/channel_tests/test_channel_details.py::test_non_member_not_successful PASSED [ 19%]
http_tests/channel_tests/test_channel_details.py::test_invalid_channel_id PASSED [ 20%]
http_tests/channel_tests/test_channel_details.py::test_invalid_token PASSED [ 20%]
http_tests/channel_tests/test_channel_invite.py::test_duplicate_invite SKIPPED [ 20%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_owner PASSED [ 20%]
http_tests/channel_tests/test_channel_invite.py::test_invite_global_member PASSED [ 21%]
http_tests/channel_tests/test_channel_invite.py::test_invitation_from_non_channel_member PASSED [ 21%]
http_tests/channel_tests/test_channel_invite.py::test_channel_id_invalid PASSED [ 21%]
http_tests/channel_tests/test_channel_invite.py::test_u_id_invalid PASSED [ 22%]
http_tests/channel_tests/test_channel_invite.py::test_invalidated_token PASSED [ 22%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_public PASSED [ 22%]
http_tests/channel_tests/test_channel_join.py::test_global_owner_join_channel_private PASSED [ 23%]
http_tests/channel_tests/test_channel_join.py::test_global_member_join_public PASSED [ 23%]
http_tests/channel_tests/test_channel_join.py::test_already_joined_channel SKIPPED [ 23%]
http_tests/channel_tests/test_channel_join.py::test_join_invalid_channel_id PASSED [ 23%]
http_tests/channel_tests/test_channel_join.py::test_invalidated_token PASSED [ 24%]
http_tests/channel_tests/test_channel_leave.py::test_member_leave_channel_successfully PASSED [ 24%]
http_tests/channel_tests/test_channel_leave.py::test_leave_channel_when_not_member PASSED [ 24%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_channel_id PASSED [ 25%]
http_tests/channel_tests/test_channel_leave.py::test_invalid_token PASSED [ 25%]
http_tests/channel_tests/test_channel_messages.py::test_under_fifty_messages_sent PASSED [ 25%]
http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent FAILED [ 25%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_edit_reflected PASSED [ 26%]
http_tests/channel_tests/test_channel_messages.py::test_removal_by_deletion_reflected PASSED [ 26%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 26%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_user_is_non_member PASSED [ 27%]
http_tests/channel_tests/test_channel_messages.py::test_input_error_when_channel_id_invalid PASSED [ 27%]
http_tests/channel_tests/test_channel_messages.py::test_access_error_when_invalid_token_given PASSED [ 27%]
http_tests/channel_tests/test_channel_removeowner.py::test_owner_can_remove_owner PASSED [ 27%]
http_tests/channel_tests/test_channel_removeowner.py::test_global_owner_can_remove_owner PASSED [ 28%]
http_tests/channel_tests/test_channel_removeowner.py::test_nonmember_cannot_remove_owner PASSED [ 28%]
http_tests/channel_tests/test_channel_removeowner.py::test_member_cannot_remove_owner PASSED [ 28%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_last_owner PASSED [ 29%]
http_tests/channel_tests/test_channel_removeowner.py::test_cannot_remove_non_owner PASSED [ 29%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalid_u_id SKIPPED [ 29%]
http_tests/channel_tests/test_channel_removeowner.py::test_with_invalid_channel_id PASSED [ 30%]
http_tests/channel_tests/test_channel_removeowner.py::test_invalidated_token PASSED [ 30%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[True-andys room] PASSED [ 30%]
http_tests/channels_tests/test_channels_create.py::test_create_channel[False-andys room] PASSED [ 30%]
http_tests/channels_tests/test_channels_create.py::test_channel_name_length[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 31%]
http_tests/channels_tests/test_channels_create.py::test_channel_name_length[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 31%]
http_tests/channels_tests/test_channels_create.py::test_invalidated_token PASSED [ 31%]
http_tests/channels_tests/test_channels_list.py::test_when_in_no_channels PASSED [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[True-andy] PASSED [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_one_channel[False-andy] PASSED [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-True-ZERG-andy] PASSED [ 32%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[False-False-ZERG-andy] PASSED [ 33%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-True-ZERG-andy] PASSED [ 33%]
http_tests/channels_tests/test_channels_list.py::test_when_in_multiple_channels[True-False-ZERG-andy] PASSED [ 33%]
http_tests/channels_tests/test_channels_list.py::test_list_after_leave_channel PASSED [ 34%]
http_tests/channels_tests/test_channels_list.py::test_invalidated_token PASSED [ 34%]
http_tests/channels_tests/test_channels_listall.py::test_when_no_channels PASSED [ 34%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private FAILED [ 34%]
http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_public PASSED [ 35%]
http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist FAILED [ 35%]
http_tests/channels_tests/test_channels_listall.py::test_invalidated_token PASSED [ 35%]
http_tests/dm_tests/test_dm_create.py::test_successful_dm_creation PASSED [ 36%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_single PASSED [ 36%]
http_tests/dm_tests/test_dm_create.py::test_dm_name_creation_multiple PASSED [ 36%]
http_tests/dm_tests/test_dm_create.py::test_dm_to_invalid_user PASSED    [ 37%]
http_tests/dm_tests/test_dm_create.py::test_invalid_token FAILED         [ 37%]
http_tests/dm_tests/test_dm_details.py::test_member_successful PASSED    [ 37%]
http_tests/dm_tests/test_dm_details.py::test_non_member_not_successful PASSED [ 37%]
http_tests/dm_tests/test_dm_details.py::test_invalid_dm_id PASSED        [ 38%]
http_tests/dm_tests/test_dm_details.py::test_invalid_token PASSED        [ 38%]
http_tests/dm_tests/test_dm_invite.py::test_duplicate_dm_invite SKIPPED  [ 38%]
http_tests/dm_tests/test_dm_invite.py::test_invite_global_member PASSED  [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_invitation_from_non_dm_member PASSED [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_dm_id_invalid PASSED         [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_u_id_invalid PASSED          [ 39%]
http_tests/dm_tests/test_dm_invite.py::test_invalidated_token PASSED     [ 40%]
http_tests/dm_tests/test_dm_leave.py::test_member_leave_dm_successfully PASSED [ 40%]
http_tests/dm_tests/test_dm_leave.py::test_leave_channel_when_not_member PASSED [ 40%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_dm_id PASSED          [ 41%]
http_tests/dm_tests/test_dm_leave.py::test_invalid_token PASSED          [ 41%]
http_tests/dm_tests/test_dm_list.py::test_when_in_no_dms PASSED          [ 41%]
http_tests/dm_tests/test_dm_list.py::test_when_in_one_dm PASSED          [ 41%]
http_tests/dm_tests/test_dm_list.py::test_when_in_multiple_dms PASSED    [ 42%]
http_tests/dm_tests/test_dm_list.py::test_list_after_leave_dm PASSED     [ 42%]
http_tests/dm_tests/test_dm_list.py::test_invalidated_token PASSED       [ 42%]
http_tests/dm_tests/test_dm_messages.py::test_under_fifty_messages_sent PASSED [ 43%]
http_tests/dm_tests/test_dm_messages.py::test_over_fifty_messages_sent PASSED [ 43%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_edit_reflected PASSED [ 43%]
http_tests/dm_tests/test_dm_messages.py::test_removal_by_deletion_reflected PASSED [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_start_greater_than_message_num PASSED [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_user_is_non_member PASSED [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_input_error_when_dm_id_invalid PASSED [ 44%]
http_tests/dm_tests/test_dm_messages.py::test_access_error_when_invalid_token_given PASSED [ 45%]
http_tests/dm_tests/test_dm_remove.py::test_successful_dm_removal PASSED [ 45%]
http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages FAILED [ 45%]
http_tests/dm_tests/test_dm_remove.py::test_nonowner_cannot_remove_dm PASSED [ 46%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_dm_id PASSED         [ 46%]
http_tests/dm_tests/test_dm_remove.py::test_invalid_token PASSED         [ 46%]
http_tests/echo_tests/echo_test.py::test_echo PASSED                     [ 46%]
http_tests/echo_tests/echo_test.py::test_echo_except PASSED              [ 47%]
http_tests/message_tests/test_message_edit.py::test_original_poster_can_edit_message PASSED [ 47%]
http_tests/message_tests/test_message_edit.py::test_owner_can_edit_members_message PASSED [ 47%]
http_tests/message_tests/test_message_edit.py::test_global_owner_can_edit_members_message PASSED [ 48%]
http_tests/message_tests/test_message_edit.py::test_empty_edit_deletes_message PASSED [ 48%]
http_tests/message_tests/test_message_edit.py::test_invalid_message_length PASSED [ 48%]
http_tests/message_tests/test_message_edit.py::test_cannot_edit_deleted_message PASSED [ 48%]
http_tests/message_tests/test_message_edit.py::test_nonowner_nonposter_cant_edit PASSED [ 49%]
http_tests/message_tests/test_message_edit.py::test_invalid_token PASSED [ 49%]
http_tests/message_tests/test_message_meta.py::test_message_ids_unique FAILED [ 49%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_in_channel PASSED [ 50%]
http_tests/message_tests/test_message_pin.py::test_successful_pin_in_dm PASSED [ 50%]
http_tests/message_tests/test_message_pin.py::test_invalid_message_id PASSED [ 50%]
http_tests/message_tests/test_message_pin.py::test_cannot_pin_twice PASSED [ 51%]
http_tests/message_tests/test_message_pin.py::test_channel_member_cant_pin PASSED [ 51%]
http_tests/message_tests/test_message_pin.py::test_dm_member_cant_pin PASSED [ 51%]
http_tests/message_tests/test_message_pin.py::test_nonmember_cant_pin PASSED [ 51%]
http_tests/message_tests/test_message_pin.py::test_invalid_token PASSED  [ 52%]
http_tests/message_tests/test_message_react.py::test_successful_react_in_channel FAILED [ 52%]
http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message FAILED [ 52%]
http_tests/message_tests/test_message_react.py::test_invalid_message_id PASSED [ 53%]
http_tests/message_tests/test_message_react.py::test_invalid_react_id PASSED [ 53%]
http_tests/message_tests/test_message_react.py::test_cant_react_twice FAILED [ 53%]
http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react FAILED [ 53%]
http_tests/message_tests/test_message_react.py::test_invalid_token FAILED [ 54%]
http_tests/message_tests/test_message_remove.py::test_original_poster_can_remove_message PASSED [ 54%]
http_tests/message_tests/test_message_remove.py::test_owner_can_remove_members_message PASSED [ 54%]
http_tests/message_tests/test_message_remove.py::test_global_owner_can_remove_members_message PASSED [ 55%]
http_tests/message_tests/test_message_remove.py::test_cannot_remove_deleted_message PASSED [ 55%]
http_tests/message_tests/test_message_remove.py::test_nonowner_nonposter_cant_remove_message PASSED [ 55%]
http_tests/message_tests/test_message_remove.py::test_invalid_token PASSED [ 55%]
http_tests/message_tests/test_message_send.py::test_valid_message PASSED [ 56%]
http_tests/message_tests/test_message_send.py::test_nonmember_post PASSED [ 56%]
http_tests/message_tests/test_message_send.py::test_invalid_channel SKIPPED [ 56%]
http_tests/message_tests/test_message_send.py::test_invalid_message PASSED [ 57%]
http_tests/message_tests/test_message_send.py::test_invalid_token PASSED [ 57%]
http_tests/message_tests/test_message_senddm.py::test_valid_message PASSED [ 57%]
http_tests/message_tests/test_message_senddm.py::test_nonmember_post PASSED [ 58%]
http_tests/message_tests/test_message_senddm.py::test_invalid_dm SKIPPED [ 58%]
http_tests/message_tests/test_message_senddm.py::test_invalid_message PASSED [ 58%]
http_tests/message_tests/test_message_senddm.py::test_invalid_token PASSED [ 58%]
http_tests/message_tests/test_message_sendlater.py::test_valid_future_message PASSED [ 59%]
http_tests/message_tests/test_message_sendlater.py::test_nonmeber_cannot_sendlater PASSED [ 59%]
http_tests/message_tests/test_message_sendlater.py::test_cannot_time_travel PASSED [ 59%]
http_tests/message_tests/test_message_sendlater.py::test_message_too_long PASSED [ 60%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_channel PASSED [ 60%]
http_tests/message_tests/test_message_sendlater.py::test_invalid_token PASSED [ 60%]
http_tests/message_tests/test_message_sendlaterdm.py::test_valid_future_message PASSED [ 60%]
http_tests/message_tests/test_message_sendlaterdm.py::test_nonmeber_cannot_sendlater PASSED [ 61%]
http_tests/message_tests/test_message_sendlaterdm.py::test_cannot_time_travel PASSED [ 61%]
http_tests/message_tests/test_message_sendlaterdm.py::test_message_too_long PASSED [ 61%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_dm PASSED [ 62%]
http_tests/message_tests/test_message_sendlaterdm.py::test_invalid_token PASSED [ 62%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_channel PASSED [ 62%]
http_tests/message_tests/test_message_share.py::test_successful_share_to_dm PASSED [ 62%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[True] FAILED [ 63%]
http_tests/message_tests/test_message_share.py::test_successful_cross_share[False] FAILED [ 63%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm FAILED [ 63%]
http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_channel PASSED [ 64%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_channel SKIPPED [ 64%]
http_tests/message_tests/test_message_share.py::test_cannot_share_from_unjoined_dm SKIPPED [ 64%]
http_tests/message_tests/test_message_share.py::test_invalid_og_message_id SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_invalid_message_length SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_channel_id SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_share_to_invalid_dm_id SKIPPED [ 65%]
http_tests/message_tests/test_message_share.py::test_invalid_token PASSED [ 66%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_channel PASSED [ 66%]
http_tests/message_tests/test_message_unpin.py::test_successful_unpin_in_dm PASSED [ 66%]
http_tests/message_tests/test_message_unpin.py::test_invalid_message_id PASSED [ 67%]
http_tests/message_tests/test_message_unpin.py::test_cannot_unpin_twice PASSED [ 67%]
http_tests/message_tests/test_message_unpin.py::test_channel_member_cant_unpin PASSED [ 67%]
http_tests/message_tests/test_message_unpin.py::test_dm_member_cant_unpin PASSED [ 67%]
http_tests/message_tests/test_message_unpin.py::test_nonmember_cant_unpin PASSED [ 68%]
http_tests/message_tests/test_message_unpin.py::test_invalid_token PASSED [ 68%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel FAILED [ 68%]
http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message FAILED [ 69%]
http_tests/message_tests/test_message_unreact.py::test_invalid_message_id PASSED [ 69%]
http_tests/message_tests/test_message_unreact.py::test_invalid_react_id FAILED [ 69%]
http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice FAILED [ 69%]
http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact FAILED [ 70%]
http_tests/message_tests/test_message_unreact.py::test_invalid_token FAILED [ 70%]
http_tests/other_tests/test_clear.py::test_clear_works FAILED            [ 70%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_send_triggers_notification PASSED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification FAILED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_edit_triggers_notification SKIPPED [ 71%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_share_triggers_notification SKIPPED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_standup_finishing_triggers_notification SKIPPED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlater_triggers_notification PASSED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification FAILED [ 72%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[a small message] PASSED [ 73%]
http_tests/other_tests/test_notifications_get.py::test_tag_notification_message_preview_length[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] PASSED [ 73%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch] FAILED [ 73%]
http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm] FAILED [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_invite_triggers_notification PASSED [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_ch_addowner_triggers_notification SKIPPED [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification FAILED [ 74%]
http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_invite_triggers_notification FAILED [ 75%]
http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched FAILED [ 75%]
http_tests/other_tests/test_notifications_get.py::test_invalid_token FAILED [ 75%]
http_tests/other_tests/test_search.py::test_no_matches FAILED            [ 76%]
http_tests/other_tests/test_search.py::test_single_match FAILED          [ 76%]
http_tests/other_tests/test_search.py::test_multiple_matches FAILED      [ 76%]
http_tests/other_tests/test_search.py::test_multiple_channels_joined FAILED [ 76%]
http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels FAILED [ 77%]
http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user FAILED [ 77%]
http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] FAILED [ 77%]
http_tests/other_tests/test_search.py::test_invalid_token FAILED         [ 78%]
http_tests/other_tests/test_users_all.py::test_successful_users_all PASSED [ 78%]
http_tests/other_tests/test_users_all.py::test_invalid_token PASSED      [ 78%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[True] PASSED [ 79%]
http_tests/standup_tests/test_standup_active.py::test_correct_return_format[False] PASSED [ 79%]
http_tests/standup_tests/test_standup_active.py::test_active_standup PASSED [ 79%]
http_tests/standup_tests/test_standup_active.py::test_inactive_standup PASSED [ 79%]
http_tests/standup_tests/test_standup_active.py::test_invalid_channel_id PASSED [ 80%]
http_tests/standup_tests/test_standup_active.py::test_invalid_token PASSED [ 80%]
http_tests/standup_tests/test_standup_send.py::test_messages_buffered_and_displayed_correctly PASSED [ 80%]
http_tests/standup_tests/test_standup_send.py::test_return_format PASSED [ 81%]
http_tests/standup_tests/test_standup_send.py::test_non_member_cannot_standup_send PASSED [ 81%]
http_tests/standup_tests/test_standup_send.py::test_send_when_standup_inactive PASSED [ 81%]
http_tests/standup_tests/test_standup_send.py::test_invalid_message_length PASSED [ 81%]
http_tests/standup_tests/test_standup_send.py::test_invalid_channel_id PASSED [ 82%]
http_tests/standup_tests/test_standup_send.py::test_invalid_token PASSED [ 82%]
http_tests/standup_tests/test_standup_start.py::test_standup_start_return_format PASSED [ 82%]
http_tests/standup_tests/test_standup_start.py::test_standup_restartable_after_lapse PASSED [ 83%]
http_tests/standup_tests/test_standup_start.py::test_standup_affects_only_one_channel PASSED [ 83%]
http_tests/standup_tests/test_standup_start.py::test_creator_cannot_leave_during_startup SKIPPED [ 83%]
http_tests/standup_tests/test_standup_start.py::test_standup_cannot_be_started_in_dm PASSED [ 83%]
http_tests/standup_tests/test_standup_start.py::test_nonmember_cannot_start_standup PASSED [ 84%]
http_tests/standup_tests/test_standup_start.py::test_cannot_start_standup_when_already_active PASSED [ 84%]
http_tests/standup_tests/test_standup_start.py::test_invalid_channel_id PASSED [ 84%]
http_tests/standup_tests/test_standup_start.py::test_invalid_token PASSED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_return_type_correct FAILED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create FAILED [ 85%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join FAILED [ 86%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite FAILED [ 86%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave FAILED [ 86%]
http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_add_owner FAILED [ 86%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create FAILED [ 87%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_invite FAILED [ 87%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave FAILED [ 87%]
http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove FAILED [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send FAILED [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater FAILED [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm FAILED [ 88%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater FAILED [ 89%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share FAILED [ 89%]
http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish FAILED [ 89%]
http_tests/stats_tests/test_user_stats.py::test_involvement_tracked FAILED [ 90%]
http_tests/stats_tests/test_user_stats.py::test_invalid_token FAILED     [ 90%]
http_tests/user_tests/test_user_profile.py::test_user_profile_valid PASSED [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_user PASSED     [ 90%]
http_tests/user_tests/test_user_profile.py::test_invalid_token FAILED    [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_successful_email_change PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_cannot_change_to_taken_email PASSED [ 91%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[bob] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[a@mgail.com] PASSED [ 92%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab.com] PASSED [ 93%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[@gmail.com] PASSED [ 93%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_email[ab@ab@gmail.com] PASSED [ 93%]
http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token FAILED [ 93%]
http_tests/user_tests/test_user_profile_sethandle.py::test_successful_handle_change PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_cannot_change_to_taken_handle PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[] PASSED [ 94%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[a] PASSED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aa] PASSED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_handle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 95%]
http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token FAILED [ 95%]
http_tests/user_tests/test_user_profile_setname.py::test_user_profile_setname_valid_name PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] PASSED [ 96%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-] PASSED [ 97%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_name[PotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHeadPotatoeHead-MRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMRMR] PASSED [ 97%]
http_tests/user_tests/test_user_profile_setname.py::test_invalid_token FAILED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_return_format_correct PASSED [ 97%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_cannot_upload_non_jpeg PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[-1000-0-0-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0--1000-0-0] PASSED [ 98%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0--1000-0] PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_dimensions[0-0-0--1000] PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_url PASSED [ 99%]
http_tests/user_tests/test_user_profile_uploadphoto.py::test_invalid_token PASSED [100%]

=================================== FAILURES ===================================
________________________ test_removal_can_do_no_action _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WU4NGEtZTk4NC00YmY3LWFjNGMtMzcwNjkyY2RjNGI2In0.IKFD7qmlkYwlnEelw_dAHfQRa-6SQZyRNrOQTFko8N8', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...DZhYTI1NDItODAwZi00YTE5LWJhZDEtZDFiOTQ3NjMxYzA0In0.zddGD32mFVoy5NZn9vpiHXhi9VD02Ped49K8S2fTsYI', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_removal_can_do_no_action(user_woody, user_zerg, woodys_public_toybox, ctx):
        admin_user_remove(user_woody.token, user_zerg.u_id, ctx)
    
        with pytest.raises(AccessError):
>           auth_logout(user_zerg.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/admin_tests/test_admin_user_remove.py:19: Failed
__________________________ test_can_have_two_sessions __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mI3NTItZGZjNi00MzM5LTk3YTMtNzY4MzQ0YWJkZWQ3In0.E2oCA4Vjk7hAmu8W_s0ztafdzoPlEYthWMEejVKJ47s', handle_str='sheriffwoody')
ctx = None

    def test_can_have_two_sessions(user_woody, ctx):
        session2 = auth_login(user_woody.email, user_woody.password, ctx)
    
        # succeeds
        assert user_profile(session2['token'], user_woody.u_id, ctx) == user_profile(user_woody.token, user_woody.u_id, ctx)
    
        assert auth_logout(session2['token'], ctx)
    
        with pytest.raises(AccessError):
            # should now fail...
>           user_profile(session2['token'], user_woody.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/auth_tests/test_auth_login.py:28: Failed
__________________________ test_not_logged_in_logout ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zRmNzMtOGI3Yy00ODNhLThiZWYtZmI5YTA3NzM1Yzg4In0.Cr39voFEFvS0ONXZP1zxsRQX_XnHO-O5EXg5LoN_AH8', handle_str='sheriffwoody')
ctx = None

    def test_not_logged_in_logout(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
    
        with pytest.raises(AccessError):
>           auth_logout(user_woody.token, ctx) == {'is_success': False}
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/auth_tests/test_auth_logout.py:19: Failed
__________________ test_password_request_logs_out_everywhere ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DA5Y2EtYmVkMS00YzgwLTk5NWQtMzVhNTY0ZDkzYzRhIn0.RuiOOwwBYYIsEiGarYAWvHzsyDR6RzF0L2aWmr9PDbI', handle_str='sheriffwoody')
ctx = None

    def test_password_request_logs_out_everywhere(user_woody, ctx):
        sess2 = auth_login(user_woody.email, user_woody.password, ctx)
    
        auth_passwordreset_request(user_woody.email, ctx)
    
        with pytest.raises(AccessError):
>           users_all(user_woody.token, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/auth_tests/test_passwordreset_request.py:23: Failed
____________________________ test_member_successful ____________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TY2ZDktZDE5MC00MzhkLTkxZTQtODYxZTBlYjVkNjI5In0.XbYm9gmpGT5_2uGqoqnWd4wcCMKdQDUWXUH73gkOXxo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...QwY2EtNTdjZi00MDU3LWIzMmQtZWI4ZjU3Njc0ODFiIn0.bHnDEbOQgHBDamH26ocSDFRr9zhUpevfGU3FpOhJuE4', handle_str='buzzlightyear')
ctx = None

    def test_member_successful(woodys_public_toybox, user_woody, user_buzz, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        ch_deets_1 = channel_details(user_woody.token, woodys_public_toybox.channel_id, ctx)
        ch_deets_2 = channel_details(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        assert ch_deets_1['name'] == woodys_public_toybox.name
        assert ch_deets_2['name'] == woodys_public_toybox.name
    
>       assert ch_deets_1['is_public'] == woodys_public_toybox.is_public
E       assert None == True
E         +None
E         -True

http_tests/channel_tests/test_channel_details.py:20: AssertionError
________________________ test_over_fifty_messages_sent _________________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DBkZjItYzQxYy00YTgwLWJlZTEtMjI1ZjNmMTdiNzAwIn0.C8rT4-WWk98prIG_LuOfbWt40sHZlad2_OQfawoLW-s', handle_str='sheriffwoody')
ctx = None

    def test_over_fifty_messages_sent(woodys_public_toybox, user_woody, ctx):
        message_ids = [
            message_send(user_woody.token, woodys_public_toybox.channel_id, 'you are a toy', ctx)['message_id'] for x in
            range(51)
        ]
        message_ids.reverse()
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        assert ch_msgs['start'] == 0
        assert ch_msgs['end'] == 50
>       assert message_ids[0: 50] == [m['message_id'] for m in ch_msgs['messages']]
E       assert [51,\n 50,\n 49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2] == [51,\n 50,\n 49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2,\n 1]
E         Right contains one more item: 1
E         Full diff:
E           [
E            51,
E            50,
E            49,
E            48,
E            47,
E            46,
E            45,
E            44,
E            43,
E            42,
E            41,
E            40,
E            39,
E            38,
E            37,
E            36,
E            35,
E            34,
E            33,
E            32,
E            31,
E            30,
E            29,
E            28,
E            27,
E            26,
E            25,
E            24,
E            23,
E            22,
E            21,
E            20,
E            19,
E            18,
E            17,
E            16,
E            15,
E            14,
E            13,
E            12,
E            11,
E            10,
E            9,
E            8,
E            7,
E            6,
E            5,
E            4,
E            3,
E            2,
E         -  1,
E           ]

http_tests/channel_tests/test_channel_messages.py:35: AssertionError
_____________________ test_when_one_channel_exists_private _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TQ0MzYtYmNkMC00NGE5LTliZGYtMDMzMGNjOTlmZWU1In0.cYLcfVm4H_9soqtf1pf-kQ9A3QHP69j_tCIRwGM-3tE', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_when_one_channel_exists_private(user_woody, zergs_private_lair, ctx):
        channel_detail = {'channel_id': zergs_private_lair.channel_id, 'name': zergs_private_lair.name}
    
>       assert channel_detail in channels_listall(user_woody.token, ctx)['channels']
E       AssertionError: assert {'channel_id': 1, 'name': 'zergs lair'} in []

http_tests/channels_tests/test_channels_listall.py:18: AssertionError
______________________ test_when_multiple_channels_exist _______________________

woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=2, owner_members=[2], all_members=[])
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=3, to...RiZTgtOTlkZi00YjcwLWI0MGQtMThmNDkxMjg0YWVhIn0.HpVZtQ8fE7EZEY33oSDAEt82SvA8f6qLL4GQexh7_r4', handle_str='buzzlightyear')
ctx = None

    def test_when_multiple_channels_exist(woodys_public_toybox, zergs_private_lair, user_buzz, ctx):
        expected_chs = [
            {'channel_id': woodys_public_toybox.channel_id, 'name': woodys_public_toybox.name},
            {'channel_id': zergs_private_lair.channel_id, 'name': zergs_private_lair.name}
        ]
    
        chs = channels.channels_listall(user_buzz.token, ctx)['channels']
    
>       assert sorted(chs, key=lambda d: d['channel_id']) == sorted(expected_chs, key=lambda d: d['channel_id'])
E       AssertionError: assert [{'channel_id': 1, 'name': 'woodys toybox'}] == [{'channel_id': 1, 'name': 'woodys toybox'},\n {'channel_id': 2, 'name': 'zergs lair'}]
E         Right contains one more item: {'channel_id': 2, 'name': 'zergs lair'}
E         Full diff:
E           [
E            {'channel_id': 1,
E             'name': 'woodys toybox'},
E         -  {'channel_id': 2,
E         -   'name': 'zergs lair'},
E           ]

http_tests/channels_tests/test_channels_listall.py:35: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mVhODctYzQxYy00OGRmLTgwODctOTJmYWIyOWI5OGVjIn0.gLEjVpFWXRD7v56eBLNGVmG1FOXHwI_t2QtL1yGr1rA', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           dm_create(user_woody.token, [], ctx)

http_tests/dm_tests/test_dm_create.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/dm.py:37: in dm_create
    token=token, u_ids=u_ids
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
________________________ test_removal_removes_messages _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GU3NTItMzMwNy00ZTY5LTk5NDItMzAwYzI5OWFkMjE1In0.HuHeKsIwVzGJ47KEQWs0IGbTzmx29duufPy78yW2IyQ', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a011982f0>
ctx = None

    def test_removal_removes_messages(user_woody, woody_and_buzz_dm, message_factory, ctx):
        message_factory(user_woody, woody_and_buzz_dm, 'electric')
        message_factory(user_woody, woody_and_buzz_dm, 'electric mouse')
        message_factory(user_woody, woody_and_buzz_dm, 'electric house')
    
>       assert len(search(user_woody.token, 'electric', ctx)['messages']) == 3
E       KeyError: 'messages'

http_tests/dm_tests/test_dm_remove.py:23: KeyError
___________________________ test_message_ids_unique ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TA1ODgtMGQ1MC00NzAwLTllMTktNjdjODg2NDEzNDg3In0.vv0UiR5BjJp01nonxKT2HvcGR1xYnk63TyG5IU2YxFE', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...zI2MTM5MzAtN2FjMS00MzA1LWExYzctNzAwNmE2ZDkyYTA3In0.h6pdkhfcuE8gPVDpiTEItS0m6ST1CRBY0IL4xpQwsJw', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[3], name='buzzlightyear, sheriffwoody', dm_id=1)
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_message_ids_unique(user_woody, user_zerg, woody_and_buzz_dm, zergs_private_lair, ctx):
        msg1 = message_send(user_zerg.token, zergs_private_lair.channel_id, 'hi', ctx)
    
        # intra
        msg2 = message_sendlater(user_zerg.token, zergs_private_lair.channel_id, 'hi', utc_now() + 1, ctx)
    
        # cross
        msg3 = message_senddm(user_woody.token, woody_and_buzz_dm.dm_id, 'hi again', ctx)
        msg4 = message_sendlaterdm(user_woody.token, woody_and_buzz_dm.dm_id, 'hi one more time', utc_now() + 1, ctx)
    
        sleep(2)
    
        assert msg1['message_id'] != msg2['message_id']
>       assert msg2['message_id'] != msg3['message_id']
E       assert 2 != 2

http_tests/message_tests/test_message_meta.py:22: AssertionError
_______________________ test_successful_react_in_channel _______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mQ1YmUtYTE5NC00YTFlLTkyNjctODk0OWU0ZTUxZTk4In0.bkgFR_RHXDPgVeS_bNdHrKWsERM8DXl6fD3yjqeNpBQ', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...VkOTItYjYxNC00YzQ3LTg5NGMtODAyZWNkMjNjMTQyIn0.UrPwBCbtb_MS4Od1ZlG1SF6mUMNP-tl7a7JMMFfG9QU', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a012948c8>
ctx = None

    def test_successful_react_in_channel(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
>       assert message_react(user_woody.token, a_msg.message_id, REACT, ctx) == {}

http_tests/message_tests/test_message_react.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
_____________________ test_successful_react_to_dm_message ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zU4MDEtOGUwOC00ZmQ4LTljNDctYjcwOWM4ZTgxMDUwIn0.J4xfb5VvRSbOXMBQ2GPZGasJHW8o02nSGDiKPI1t7iw', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...QxM2EtOGI1Ni00ZTMyLWEzNWMtMjZiMWM4ZjM3MDEyIn0.Du7dtuXSsvEE-Nz8_V9sRlDw6MW5JZ-utCeK9CKD0Y0', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a011736a8>
ctx = None

    def test_successful_react_to_dm_message(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
    
>       assert message_react(user_woody.token, a_msg.message_id, REACT, ctx) == {}

http_tests/message_tests/test_message_react.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
____________________________ test_cant_react_twice _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zI2ZmQtMDlmMi00YmJkLWE2NDQtNjQ1NDE1MWJlNTVkIn0.UkUmSAEedSNqWUjGaTle1_uIZLeED7iRyZSby6Tk6cU', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01201048>
ctx = None

    def test_cant_react_twice(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       message_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_react.py:60: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
_________________________ test_nonmember_cannot_react __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jVhZDEtZjFmYS00MTlmLTk4OWEtNjBlYmJkMmE4NTc4In0.q1DgFCXTlprzNQSzWOEE7DxuqpAn_gUiDE2XCZErw60', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...WMyZTBhYzYtMWVlYy00MDc4LWEyYTgtMTQ0OWY5N2I1YTY3In0.JZS6Una-lSGeK20j3iIvIgSi_C9-Tup57jGOwf8yhQs', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a0129d598>
ctx = None

    def test_nonmember_cannot_react(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        with pytest.raises(AccessError):
>           message_react(user_zerg.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_react.py:68: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jc5MGMtMmZlNS00ZmQ5LThiYzQtYjM1OTgxZjJmYmMzIn0.mhxo39n3v-y4Z_a2I5c1zUFJRdvdHRtErSRHjwq-kZU', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01173598>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           message_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_react.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
______________________ test_successful_cross_share[True] _______________________

to_ch = True
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GIxZjItMjYxMi00YmJlLWIwMzItMjIyYjE2ZmMxYzk0In0.1WIU7H04J-ilcX5F_zoLD3Iw0I50Mr50w5GTz9rk7vM', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01293c80>
ctx = None

    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
            msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        else:
            a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)
            msgs = dm_messages(user_woody.token, woody_and_buzz_dm.dm_id, 0, ctx)
    
        assert 'shared_message_id' in cross
>       assert cross['shared_message_id'] in [m['message_id'] for m in msgs['messages']]
E       assert None in []

http_tests/message_tests/test_message_share.py:50: AssertionError
______________________ test_successful_cross_share[False] ______________________

to_ch = False
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...Tk3N2EtYTBjMC00MzllLTgxMTItNzAwNWY0OGNmMmFjIn0.MLkOJuBWOSLDNuqWTTlBgzMLcU2zMX7jV3AodBfowRY', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01198d08>
ctx = None

    @pytest.mark.parametrize('to_ch', [True, False])
    def test_successful_cross_share(to_ch, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        if to_ch:
            a_msg = message_factory(user_woody, woody_and_buzz_dm, 'hi')
            cross = message_share(user_woody.token, a_msg.message_id, 'amazing', woodys_public_toybox.channel_id, -1, ctx)
            msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
        else:
            a_msg = message_factory(user_woody, woodys_public_toybox, 'hi')
>           cross = message_share(user_woody.token, a_msg.message_id, 'amazing', -1, woody_and_buzz_dm.dm_id, ctx)

http_tests/message_tests/test_message_share.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:91: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________________ test_cannot_share_to_unjoined_dm _______________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...mY2OWYxNTUtNDQ5Zi00MGY5LWFmYmUtNzk1MjE5MTBlZDMwIn0.0lkPlstRFHh98FDqylM2jFWg-PhyeVx9fCAOmdFFqDU', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=2, members=[3], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a012aea60>
ctx = None

    def test_cannot_share_to_unjoined_dm(user_zerg, zergs_private_lair, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_zerg, zergs_private_lair)
        with pytest.raises(AccessError):
>           message_share(user_zerg.token, a_msg.message_id, '', -1, woody_and_buzz_dm.dm_id, ctx)

http_tests/message_tests/test_message_share.py:56: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:91: in message_share
    token=token, og_message_id=og_message_id, message=msg, channel_id=channel_id, dm_id=dm_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________________ test_successful_unreact_in_channel ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GZjNDUtZDFkYy00ZWQ3LWJlZGUtYjUyYTYzYzlmZmExIn0.PWgB1VdH6p4P3O7RsJuv63KhEWQsM5WqPvRXgbMLAb4', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...A3ZWQtMTkwOC00N2Y5LTk3OWMtNzkwODgyOWU4MTc3In0.R6Kp7ws-cJTGDbPdJWF8f-8ZaBTLS0FCOHpxxGAJBw4', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01183158>
ctx = None

    def test_successful_unreact_in_channel(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        a_msg = message_factory(user_woody, woodys_public_toybox)
    
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
____________________ test_successful_unreact_to_dm_message _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WNmMzAtNTk1YS00NjMwLWI3MzMtZGY3ZGMxNzI0ZDIxIn0.63A98AjQ2hUf4LXjCy7k3l-0_8BFVSNz6N6RZKejYic', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...RmZDQtNDkyNi00NjAyLTgzOTMtZGM3ZGZiMTM1OGQwIn0.uHSgLeQ6ZSFTXfJdZ4lOn0siwBSSGp3K0r4Um4Salio', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a011732f0>
ctx = None

    def test_successful_unreact_to_dm_message(user_woody, user_buzz, woody_and_buzz_dm, message_factory, ctx):
        a_msg = message_factory(user_woody, woody_and_buzz_dm)
    
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
____________________________ test_invalid_react_id _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...Dc4OWYtNDI1OS00ZDM0LTk3MWItZDcxNDZmMzJjMTZmIn0.7KoDi1BIyKsopoKG66BQjBnblo6NHPiDUkMPvM_3f5I', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01294ae8>
ctx = None

    def test_invalid_react_id(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
___________________________ test_cant_unreact_twice ____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jZmODUtNWNhNy00ZmYzLThmMWUtNGFhZDA2YTRiZjg3In0.lLX-4S24G6LjyfbFwZMh3trhxwXViaCCNr45_ZbpVRA', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a0114c048>
ctx = None

    def test_cant_unreact_twice(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:69: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
________________________ test_nonmember_cannot_unreact _________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WJjMDYtYWM5OC00ZjYxLTk5YjYtMjQ3ZDNhNGNmMDQ4In0.xqIm9SKJO1BxIGLUj0QTjIy_juSjsdiM-YxiPC1L77g', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...TJjZWY0MzYtODkwNC00ZjY5LWExMTgtYmNiZTQyODI0MThlIn0.NgchxyU_5g0LzO_bKq28bs9Ve0zYNYZDeMjp4aphd-M', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01183510>
ctx = None

    def test_nonmember_cannot_unreact(user_woody, user_zerg, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GNkMDctMjE1Yi00NzBkLTkxMmMtZDNkMzI5NTJkZTNlIn0.ra3dhCF4dqZC6JChRq-kh4ZLCzg9gLHY-n7wzEUjWNc', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01293620>
ctx = None

    def test_invalid_token(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
>       msg_react(user_woody.token, a_msg.message_id, REACT, ctx)

http_tests/message_tests/test_message_unreact.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
_______________________________ test_clear_works _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2NiOTAtNWMyOC00OGYxLTkzMTAtOThlMDg3NThjZTY0In0.-EETFAXyYFCw_pSPiUmqsgjOPMPa4Sw5Ntbl9iJB8NI', handle_str='sheriffwoody')
user_factory = <function user_factory.<locals>.make_user at 0x7f6a0114c268>
ctx = None

    def test_clear_works(user_woody, user_factory, ctx):
        # an existing user can do something
        assert users_all(user_woody.token, ctx) is not None
    
        clear(ctx)
    
        with pytest.raises(AccessError):
            #  ex-existing user now can't do the original action because they don't exist
            users_all(user_woody.token, ctx)
    
        loner = user_factory('bob@gmail.com', 'aweakpassword', 'name_first', 'name_last')
    
        loner_prof = user_profile(loner.token, loner.u_id, ctx).popitem()[-1]
        users = users_all(loner.token, ctx)
        chs = channels_listall(loner.token, ctx)
    
>       assert users['users'] == [loner_prof]
E       AssertionError: assert [{'email': 'bob@gmail.com',\n  'handle_str': 'name_firstname_last',\n  'name_first': 'name_first',\n  'name_last': 'name_last',\n  'notifications': [],\n  'password': '2352b21737b2a3607fcd07bd80cde51f54a2d416516fca138f53927b9c7d7a38',\n  'permission_id': 1,\n  'profile_img_url': '',\n  'removed': False,\n  'reset_code': '',\n  'session_list': ['d70f9103-78e5-4faa-98aa-3ef47d04a817'],\n  'u_id': 1,\n  'user_stats': {'channels_joined': [{'num_channels_joined': 0,\n                                      'time_stamp': []}],\n                 'dms_joined': [{'num_dms_joined': 0, 'time_stamp': []}],\n                 'involvement_rate': 0,\n                 'messages_sent': [{'num_messages_sent': 0,\n                                    'time_stamp': []}]}}] == [{'email': 'bob@gmail.com',\n  'handle_str': 'name_firstname_last',\n  'name_first': 'name_first',\n  'name_last': 'name_last',\n  'profile_img_url': '',\n  'u_id': 1}]
E         At index 0 diff: {'u_id': 1, 'email': 'bob@gmail.com', 'name_first': 'name_first', 'name_last': 'name_last', 'handle_str': 'name_firstname_last', 'password': '2352b21737b2a3607fcd07bd80cde51f54a2d416516fca138f53927b9c7d7a38', 'permission_id': 1, 'removed': False, 'session_list': ['d70f9103-78e5-4faa-98aa-3ef47d04a817'], 'notifications': [], 'user_stats': {'channels_joined': [{'num_channels_joined': 0, 'time_stamp': []}], 'dms_joined': [{'num_dms_joined': 0, 'time_stamp': []}], 'messages_sent': [{'num_messages_sent': 0, 'time_stamp': []}], 'involvement_rate': 0}, 'reset_code': '', 'profile_img_url': ''} != {'u_id': 1, 'email': 'bob@gmail.com', 'name_first': 'name_first', 'name_last': 'name_last', 'handle_str': 'name_firstname_last', 'profile_img_url': ''}
E         Full diff:
E           [
E            {'email': 'bob@gmail.com',
E             'handle_str': 'name_firstname_last',
E             'name_first': 'name_first',
E             'name_last': 'name_last',
E         +   'notifications': [],
E         +   'password': '2352b21737b2a3607fcd07bd80cde51f54a2d416516fca138f53927b9c7d7a38',
E         +   'permission_id': 1,
E             'profile_img_url': '',
E         +   'removed': False,
E         +   'reset_code': '',
E         +   'session_list': ['d70f9103-78e5-4faa-98aa-3ef47d04a817'],
E         -   'u_id': 1},
E         ?            -
E         +   'u_id': 1,
E         +   'user_stats': {'channels_joined': [{'num_channels_joined': 0,
E         +                                       'time_stamp': []}],
E         +                  'dms_joined': [{'num_dms_joined': 0,
E         +                                  'time_stamp': []}],
E         +                  'involvement_rate': 0,
E         +                  'messages_sent': [{'num_messages_sent': 0,
E         +                                     'time_stamp': []}]}},
E           ]

http_tests/other_tests/test_clear.py:28: AssertionError
______________ test_tag_thru_message_senddm_triggers_notification ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DExYjgtZWE2ZS00ZmIwLTk0OGMtZmNkOTBkY2MzMDg5In0.npyVnvcqMgIHhCWe14vMpGcBOZIlW20gByCZem5rdZA', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a0111d2f0>
ctx = None

    def test_tag_thru_message_senddm_triggers_notification(user_woody, woody_and_buzz_dm, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
        message_factory(user_woody, woody_and_buzz_dm, content)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': -1,
            'dm_id': woody_and_buzz_dm.dm_id,
            'notification_message': f'{user_woody.handle_str} tagged you in {woody_and_buzz_dm.name}: {content[:20]}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'sheriffwoody tagged you in '\n                                            'buzzlightyear, sheriffwoody: '\n                                            '@sheriffwoody hi'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'sheriffwoody tagged you in buzzlightyear, sheriffwoody: @sheriffwoody hi'}]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channel_id': -1,
E         -                     'dm_id': 1,
E         -                     'notification_message': 'sheriffwoody tagged you in '
E         -                                             'buzzlightyear, sheriffwoody: '
E         -                                             '@sheriffwoody hi'}],
E           }

http_tests/other_tests/test_notifications_get.py:35: AssertionError
___________ test_tag_thru_message_sendlaterdm_triggers_notification ____________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zUzMDktYjdiNS00NjllLTlmZjItYmI2ZGE1NWJiYTdlIn0.QKdXxvV9Z6O5EhKVqP1nbuMsNSuBbWWsCTjBXrS_mxU', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a010f3048>
ctx = None

    def test_tag_thru_message_sendlaterdm_triggers_notification(user_woody, woody_and_buzz_dm, message_factory, ctx):
        content = f'@{user_woody.handle_str} hi'
        message_factory(user_woody, woody_and_buzz_dm, content, delay=1)
    
        sleep(2)
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': -1,
            'dm_id': woody_and_buzz_dm.dm_id,
            'notification_message': f'{user_woody.handle_str} tagged you in {woody_and_buzz_dm.name}: {content[:20]}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'sheriffwoody tagged you in '\n                                            'buzzlightyear, sheriffwoody: '\n                                            '@sheriffwoody hi'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'sheriffwoody tagged you in buzzlightyear, sheriffwoody: @sheriffwoody hi'}]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channel_id': -1,
E         -                     'dm_id': 1,
E         -                     'notification_message': 'sheriffwoody tagged you in '
E         -                                             'buzzlightyear, sheriffwoody: '
E         -                                             '@sheriffwoody hi'}],
E           }

http_tests/other_tests/test_notifications_get.py:123: AssertionError
_____________________ test_react_triggers_notification[ch] _____________________

dest = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jJmZjAtMmFiZS00NThhLThiODktYzVhMzNiZTI4Njk0In0.dmuJE5EMzrwhJPiJ9KbOJ7XGorCJPNRz_D1oJcXmxlQ', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01222400>
ctx = None

    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def test_react_triggers_notification(dest, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        dest = woodys_public_toybox if dest == 'ch' else woody_and_buzz_dm
        a_msg = message_factory(user_woody, dest)
    
>       message_react(user_woody.token, a_msg.message_id, 1, ctx)

http_tests/other_tests/test_notifications_get.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
_____________________ test_react_triggers_notification[dm] _____________________

dest = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GI3MGMtMjBkZi00ZWI2LWI0ZGItNGY0YzQ5ZWU0YzRjIn0.-r9vM9aSTDBP5we9ro9VsQ1YiBsSs7kVwaV_2dRUwJg', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a010f39d8>
ctx = None

    @pytest.mark.parametrize('dest', ['ch', 'dm'])
    def test_react_triggers_notification(dest, user_woody, woodys_public_toybox, woody_and_buzz_dm, message_factory, ctx):
        dest = woodys_public_toybox if dest == 'ch' else woody_and_buzz_dm
        a_msg = message_factory(user_woody, dest)
    
>       message_react(user_woody.token, a_msg.message_id, 1, ctx)

http_tests/other_tests/test_notifications_get.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/message.py:69: in message_react
    token=token, message_id=message_id, react_id=react_id
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [404]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [404]>

http_tests/fakepi/util.py:73: InputError
----------------------------- Captured stdout call -----------------------------
react id is 1
________________ test_add_thru_dm_create_triggers_notification _________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DZmYjgtNjY0OS00Yjk3LTg2ZDEtYjQwMzc0NDg4YjRkIn0.Ymy_dFtqbSIE_CFptqoaqCdJL3IEhEISbT2HuYPoPqo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...Q5MjktODk5Yi00NWQ0LWI3NGMtMzI3NDFkMTQxYTEyIn0.gx1HskJPkE4Sfe4XE2LdnNdYLl2M0eRJH5R99UdnKQk', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
ctx = None

    def test_add_thru_dm_create_triggers_notification(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        buzzs_notifs = notifications_get(user_buzz.token, ctx)
    
>       assert buzzs_notifs == {'notifications': [{
            'channel_id': -1,
            'dm_id': woody_and_buzz_dm.dm_id,
            'notification_message': f'{user_woody.handle_str} added you to {woody_and_buzz_dm.name}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'sheriffwoody added you to '\n                                            'buzzlightyear, sheriffwoody'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'sheriffwoody added you to buzzlightyear, sheriffwoody'}]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channel_id': -1,
E         -                     'dm_id': 1,
E         -                     'notification_message': 'sheriffwoody added you to '
E         -                                             'buzzlightyear, sheriffwoody'}],
E           }

http_tests/other_tests/test_notifications_get.py:190: AssertionError
________________ test_add_thru_dm_invite_triggers_notification _________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GM1NWEtMDM3Zi00MjNlLTk2ODAtZjYwMTZjMzlkNTY4In0.GpU0Vny33d0AxGri1DOLiBVCD7rKpg7BFE94dMHJUv0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...DNlNWI5M2UtNDE3Ny00MWE4LTg2ZjctMTUxMTczNmFmNTA4In0.vOE0ONbn40ckZESrdHz80qWWbsDQpmCF-8JmItM-rbs', handle_str='lordzerg')
woody_and_buzz_dm = DM(owner=1, members=[3], name='buzzlightyear, sheriffwoody', dm_id=1)
ctx = None

    def test_add_thru_dm_invite_triggers_notification(user_woody, user_zerg, woody_and_buzz_dm, ctx):
        dm_invite(user_woody.token, woody_and_buzz_dm.dm_id, user_zerg.u_id, ctx)
    
        notifs = notifications_get(user_zerg.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channel_id': -1,
            'dm_id': woody_and_buzz_dm.dm_id,
            'notification_message': f'{user_woody.handle_str} added you to {woody_and_buzz_dm.name}'
        }]}
E       AssertionError: assert {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'sheriffwoody added you to None'}]} == {'notifications': [{'channel_id': -1,\n                    'dm_id': 1,\n                    'notification_message': 'sheriffwoody added you to '\n                                            'buzzlightyear, sheriffwoody'}]}
E         Differing items:
E         {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'sheriffwoody added you to None'}]} != {'notifications': [{'channel_id': -1, 'dm_id': 1, 'notification_message': 'sheriffwoody added you to buzzlightyear, sheriffwoody'}]}
E         Full diff:
E           {
E            'notifications': [{'channel_id': -1,
E                               'dm_id': 1,
E         -                     'notification_message': 'sheriffwoody added you to '
E         +                     'notification_message': 'sheriffwoody added you to None'}],
E         ?                                                                        ++++ +++
E         -                                             'buzzlightyear, sheriffwoody'}],
E           }

http_tests/other_tests/test_notifications_get.py:202: AssertionError
__________________ test_most_recent_20_notifications_fetched ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WIzNmMtZjczNy00ZjY0LTliYWQtMGQ3YzVlM2E4MzBlIn0.piw8_gHtuLvttSwIh0XhSEy5xy7eDIPwVSfMII3gi7o', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01173048>
ctx = None

    def test_most_recent_20_notifications_fetched(user_woody, woodys_public_toybox, message_factory, ctx):
        expected = {'notifications': []}
        for ix in range(30):
            content = f'@{user_woody.handle_str} {ix}'
            message_factory(user_woody, woodys_public_toybox, content)
    
            if ix >= 10:
                expected['notifications'].insert(0, {
                    'channel_id': woodys_public_toybox.channel_id,
                    'dm_id': -1,
                    'notification_message': f'{user_woody.handle_str} tagged you in {woodys_public_toybox.name}: {content[:20]}'
                })
    
        notifs = notifications_get(user_woody.token, ctx)
    
>       assert notifs == expected
E       AssertionError: assert {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 10'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 11'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 12'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 13'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 14'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 15'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 16'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 17'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 18'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 19'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 20'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 21'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 22'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 23'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 24'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 25'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 26'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 27'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 28'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 29'}]} == {'notifications': [{'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 29'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 28'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 27'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 26'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 25'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 24'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 23'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 22'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 21'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 20'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 19'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 18'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 17'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 16'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 15'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 14'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 13'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 12'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 11'},\n                   {'channel_id': 1,\n                    'dm_id': -1,\n                    'notification_message': 'sheriffwoody tagged you in woodys '\n                                            'toybox: @sheriffwoody 10'}]}
E         Differing items:
E         {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'sheriffwoody tagged you in woodys toybox: @...annel_id': 1, 'dm_id': -1, 'notification_message': 'sheriffwoody tagged you in woodys toybox: @sheriffwoody 15'}, ...]} != {'notifications': [{'channel_id': 1, 'dm_id': -1, 'notification_message': 'sheriffwoody tagged you in woodys toybox: @...annel_id': 1, 'dm_id': -1, 'notification_message': 'sheriffwoody tagged you in woodys toybox: @sheriffwoody 24'}, ...]}
E         Full diff:
E           {
E            'notifications': [{'channel_id': 1,
E                               'dm_id': -1,
E                               'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 10'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 11'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 29'},
E         ?                                                                     -
E         +                                             'toybox: @sheriffwoody 12'},
E         ?                                                                    +
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 13'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 14'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 15'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 16'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 17'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 18'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 19'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 20'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 21'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 22'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 23'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 24'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 25'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 26'},
E         +                    {'channel_id': 1,
E         +                     'dm_id': -1,
E         +                     'notification_message': 'sheriffwoody tagged you in woodys '
E         +                                             'toybox: @sheriffwoody 27'},
E                              {'channel_id': 1,
E                               'dm_id': -1,
E                               'notification_message': 'sheriffwoody tagged you in woodys '
E                                                       'toybox: @sheriffwoody 28'},
E                              {'channel_id': 1,
E                               'dm_id': -1,
E                               'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 27'},
E         ?                                                                     ^
E         +                                             'toybox: @sheriffwoody 29'}],
E         ?                                                                     ^  +
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 26'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 25'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 24'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 23'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 22'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 21'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 20'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 19'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 18'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 17'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 16'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 15'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 14'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 13'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 12'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 11'},
E         -                    {'channel_id': 1,
E         -                     'dm_id': -1,
E         -                     'notification_message': 'sheriffwoody tagged you in woodys '
E         -                                             'toybox: @sheriffwoody 10'}],
E           }

http_tests/other_tests/test_notifications_get.py:224: AssertionError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TljYjktOGNjOS00MTk5LWIzMTgtYzAwY2ZjYWIxYWMxIn0.9L_6gy-baGSVe3Iw-E2FxoCMp8h6UUaTvTGGoOPl2Zs', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           notifications_get(user_woody.token, ctx)

http_tests/other_tests/test_notifications_get.py:230: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/other.py:55: in notifications_get
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
_______________________________ test_no_matches ________________________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...EyMjMtODcxNy00OTc5LWE4NmQtOTMzNzNlZTM4ZGIyIn0.BQf0-0xIUPnRlc2J-iXNA3amJUB09zMxyM4oKBFA4YA', handle_str='buzzlightyear')
ctx = None

    def test_no_matches(user_buzz, ctx):
        msgs = search(user_buzz.token, 'No matches', ctx)
    
>       assert msgs['messages'] == []
E       KeyError: 'messages'

http_tests/other_tests/test_search.py:15: KeyError
______________________________ test_single_match _______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WFmOGUtZDI1ZS00MGQ1LTgyMWEtMmY2YmVkYjc3NDAxIn0.tfNspo5QZmTmV3VqyDx2-Gu5e4NuZVpzV9dP4gnxhNY', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a012ae400>
ctx = None

    def test_single_match(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'anything')
    
        msgs = search(user_woody.token, 'any', ctx)
    
        ch_msgs = channel_messages(user_woody.token, woodys_public_toybox.channel_id, 0, ctx)
>       assert msgs['messages'] == ch_msgs['messages']
E       KeyError: 'messages'

http_tests/other_tests/test_search.py:24: KeyError
____________________________ test_multiple_matches _____________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zJhNWMtZjZmNS00OGFkLTkwNjYtMjUxYTVjODYzY2Q3In0.Md84eiGDIcmbl84dK8AVtrGjty2eC5SS6fII0S8ttto', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a011989d8>
ctx = None

    def test_multiple_matches(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox, 'any 1')
        another_msg = message_factory(user_woody, woodys_public_toybox, 'any 2')
    
        msgs = search(user_woody.token, 'any', ctx)
>       msgs['messages'].sort(key=lambda m: m['message'])
E       KeyError: 'messages'

http_tests/other_tests/test_search.py:37: KeyError
________________________ test_multiple_channels_joined _________________________

user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=1, token=...mYzNWI3YWUtNDEyNC00NDI3LThjZmYtY2I2MGQyOTRiYTQ3In0.-YXWjQUhKbsNA83OMuvfR_YCsmGLCH0sjK0LGP9isC4', handle_str='lordzerg')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=2, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01293b70>
ctx = None

    def test_multiple_channels_joined(user_zerg, woodys_public_toybox, zergs_private_lair, message_factory, ctx):
        channel_join(user_zerg.token, woodys_public_toybox.channel_id, ctx)
    
        in_woody = message_factory(user_zerg, woodys_public_toybox, 'any 1')
        in_zerg = message_factory(user_zerg, zergs_private_lair, 'any 2')
    
        msgs = search(user_zerg.token, 'any', ctx)
>       msgs['messages'].sort(key=lambda m: m['message'])
E       KeyError: 'messages'

http_tests/other_tests/test_search.py:58: KeyError
__________________ test_search_includes_only_joined_channels ___________________

user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=1, to...Y0MzYtYjEwMy00Nzk5LWJhNzQtM2M2ZTljN2Y2MDg4In0.goxYGTBFuBWMGiaYTjbkM8pE5bydrRf5IsC10nWOipI', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[2], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01198488>
ctx = None

    def test_search_includes_only_joined_channels(user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        message_factory(user_buzz, woodys_public_toybox, 'anything')
    
        channel_leave(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        msgs = search(user_buzz.token, 'any', ctx)
    
>       assert msgs['messages'] == []
E       KeyError: 'messages'

http_tests/other_tests/test_search.py:79: KeyError
______________ test_search_matches_more_than_just_authorised_user ______________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GI2YzItNjRmZS00N2FiLWFjYTctNTA0NmJlYzEyNjA2In0.jNjs1Lat91a2vNeCoRBMV6hVRHR_1UMYUCnkyf0Rweo', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...MyZjgtZTlkMy00ZjI1LWI5NDktMWMzOGUwMjczODE3In0.M-nzyvWLupN0N0RbFfJqXYQqgpNXXNydFvEkfhlkn9U', handle_str='buzzlightyear')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01222d90>
ctx = None

    def test_search_matches_more_than_just_authorised_user(user_woody, user_buzz, woodys_public_toybox, message_factory, ctx):
        channel_join(user_buzz.token, woodys_public_toybox.channel_id, ctx)
    
        message_factory(user_buzz, woodys_public_toybox, 'hi')
        message_factory(user_woody, woodys_public_toybox, 'hi')
    
>       msgs = search(user_woody.token, 'hi', ctx)['messages']
E       KeyError: 'messages'

http_tests/other_tests/test_search.py:88: KeyError
_ test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] _

query_str = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa...aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mE4YTQtMGM3Ni00YmNjLWE4MzYtYTlkOWRiMzA3YjA5In0.3oxqvDtP3a8iQBYXC6XCPah6PLNJJ98M4tkWDtwzTiE', handle_str='sheriffwoody')
ctx = None

    @pytest.mark.parametrize('query_str', ['a' * 1001])
    def test_invalid_search(query_str, user_woody, ctx):
        with pytest.raises(InputError):
>           search(user_woody.token, query_str, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.InputError'>

http_tests/other_tests/test_search.py:96: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zJmYTAtZTVhZS00ZDJhLTk1MzktZTZiYmE0M2RjYTU2In0.b9qXw1d_3s-Zw4zII5ej-pwztB9puyjnE3VcAOz1GyU', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           search(user_woody.token, 'anything', ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/other_tests/test_search.py:102: Failed
___________________________ test_return_type_correct ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jM2ZTItMTIwNS00MTMyLTg2MjgtNzgxMzllY2EwNDQzIn0.F-YB7MoLJ9BjBZh-eKflz3UUeZAXx2ftWQqKGo36f9s', handle_str='sheriffwoody')
ctx = None

    def test_return_type_correct(user_woody, ctx):
>       stats = user_stats(user_woody.token, ctx)

http_tests/stats_tests/test_user_stats.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
____________________ test_channels_tracked_channels_create _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mI5YjUtYjUxZi00OWYzLTgzOTQtNGM3NmVlYzk2YzRiIn0.9fFRLETqR0duD_XPhXg1wNATJarqo1_N6pxMHxZb5yk', handle_str='sheriffwoody')
channel_factory = <function channel_factory.<locals>.make_channel at 0x7f6a01222d90>
ctx = None

    def test_channels_tracked_channels_create(user_woody, channel_factory, ctx):
        channel_factory(user_woody, 'poop', True)
    
        ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
    
>       assert len(ch_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:42: AssertionError
______________________ test_channels_tracked_channel_join ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WNiY2YtNWM5Zi00ODFiLTliYTMtMTczNzU0ZjM4YTk2In0.FjCf99_-OgAh-9eY_3FKytHBehhwKRk_9CLUDrrKlus', handle_str='sheriffwoody')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_channels_tracked_channel_join(user_woody, zergs_private_lair, ctx):
        channel_join(user_woody.token, zergs_private_lair.channel_id, ctx)
    
        ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
    
>       assert len(ch_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:52: AssertionError
_____________________ test_channels_tracked_channel_invite _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jY5YzctOGQ3YS00ZGY4LWFlMzctMzFjNGIzYTU5NzFiIn0.Y7oZEiXutQAPhMh3LTUPA9yD_FOdkyokdRLd2BzNW2o', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...zgyOGQxOGItYmQ4MS00MWM1LTg0YmItZGFmZGQ2ZDFiNGU2In0.dDkTDcXMWMOkTZKtuDYdEQ1aUBLRt1S1OphKeLT_Npk', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_channels_tracked_channel_invite(user_woody, user_zerg, zergs_private_lair, ctx):
        channel_invite(user_zerg.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)
    
        ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
    
>       assert len(ch_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:62: AssertionError
_____________________ test_channels_tracked_channel_leave ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mUzY2UtZTM0YS00MTZjLWE1YjEtODc3ZjFmYzBmZGFlIn0.ng98dgFlHmBDG3LAXENeXIhaKp4tps9h0dJSRA9Y698', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
ctx = None

    def test_channels_tracked_channel_leave(user_woody, woodys_public_toybox, ctx):
        channel_leave(user_woody.token, woodys_public_toybox.channel_id, ctx)
    
        ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
    
>       assert len(ch_stats) == 3
E       assert 1 == 3
E         +1
E         -3

http_tests/stats_tests/test_user_stats.py:72: AssertionError
___________________ test_channels_tracked_channel_add_owner ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zZjNDgtY2MyNC00MzlkLWJiN2UtMjAxYzA2NTZiZDM2In0.U0OnX0bkZlveHEjOZvoqGaAo4KI3ODZLd4UEH-NloH4', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...GFhMWEyYjQtMTAxYy00NDZjLWIxNGUtY2YxZTY3YzM1MDEwIn0.LsvLgyQ--Aq8ewS0On5ENPO8jbEP2PTh4-rUCLZ192c', handle_str='lordzerg')
zergs_private_lair = Channel(name='zergs lair', is_public=False, channel_id=1, owner_members=[2], all_members=[])
ctx = None

    def test_channels_tracked_channel_add_owner(user_woody, user_zerg, zergs_private_lair, ctx):
        channel_addowner(user_zerg.token, zergs_private_lair.channel_id, user_woody.u_id, ctx)
    
        ch_stats = user_stats(user_woody.token, ctx)['user_stats']['channels_joined']
    
>       assert len(ch_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:82: AssertionError
__________________________ test_dms_tracked_dm_create __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TNkNzItYzg4OS00ZmQ4LTk3NmUtMjJiM2MxOGQ3Y2RiIn0.NuB0iaduwq1hN_cBaaAjlep4jiLnIb5NJaelRAU-ua8', handle_str='sheriffwoody')
dm_factory = <function dm_factory.<locals>.make_dm at 0x7f6a0114c510>
ctx = None

    def test_dms_tracked_dm_create(user_woody, dm_factory, ctx):
        dm_factory(user_woody, [])
    
        dm_stats = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']
    
>       assert len(dm_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:92: AssertionError
__________________________ test_dms_tracked_dm_invite __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TVjMTktYTY5Mi00Y2MzLTg2MzYtNWM1ZmQxNjkxNDQ5In0.Ws9HPHuJYlyfZKVJi-d61fMBE68NOvL2Es4TykE8mk0', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...VlOTAtNWI2Ni00NDVlLWE1NTItNjRjYTYzNGIyOTVmIn0.H66SkswSi1baNIKh-29QvtBNS9qhVdb6KqgU3m3TY34', handle_str='buzzlightyear')
dm_factory = <function dm_factory.<locals>.make_dm at 0x7f6a011988c8>
ctx = None

    def test_dms_tracked_dm_invite(user_woody, user_buzz, dm_factory, ctx):
        the_dm = dm_factory(user_buzz, [])
        dm_invite(user_buzz.token, the_dm.dm_id, user_woody.u_id, ctx)
    
        dm_stats = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']
    
>       assert len(dm_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:103: AssertionError
__________________________ test_dms_tracked_dm_leave ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zI5MzUtZDhlMS00OGZjLWE0MGQtMzNiNjNlMjYwZDA4In0.hoC6-4kKneafKIF9o8tL8DqH-X-9weaeq846lUhl9mg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
ctx = None

    def test_dms_tracked_dm_leave(user_woody, woody_and_buzz_dm, ctx):
        dm_leave(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
    
        dm_stats = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']
    
>       assert len(dm_stats) == 3
E       assert 1 == 3
E         +1
E         -3

http_tests/stats_tests/test_user_stats.py:113: AssertionError
__________________________ test_dms_tracked_dm_remove __________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jU0NWMtM2NiZC00NTEyLTgxZDAtNGZlMDk0NTgxNDg4In0.6ULRzNqyW5wNcr4hMSjUkn6CjbMsg40yzLVLrgwVDfI', handle_str='sheriffwoody')
user_buzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', name_first='buzz', name_last='lightyear', u_id=2, to...Y3ZDMtNmNmNi00MzlhLTkyZjMtNDdjNmEzZjYzY2E5In0.xUXnEcjX4Ce-1eqEEFHpeew1vQ7tXfBka3rv7oxaG00', handle_str='buzzlightyear')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
ctx = None

    def test_dms_tracked_dm_remove(user_woody, user_buzz, woody_and_buzz_dm, ctx):
        dm_remove(user_woody.token, woody_and_buzz_dm.dm_id, ctx)
    
>       dm_stats_woody = user_stats(user_woody.token, ctx)['user_stats']['dms_joined']

http_tests/stats_tests/test_user_stats.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________________ test_messages_tracked_message_send ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jBmYjMtMTVlZS00MWM2LTllNDgtNmNhZWIwYTQ3MDAwIn0.wKrpxUS02DvuB0IdQ_BNgvKIp5TL5UOwIwNCID9L3p8', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a011982f0>
ctx = None

    def test_messages_tracked_message_send(user_woody, woodys_public_toybox, message_factory, ctx):
        message_factory(user_woody, woodys_public_toybox)
    
        msg_stats = user_stats(user_woody.token, ctx)['user_stats']['messages_sent']
    
>       assert len(msg_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:135: AssertionError
___________________ test_messages_tracked_message_sendlater ____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...2FhNmYtMmFiZi00YjJkLWExZjQtM2RjOWVjMjJmZDQwIn0.HFM5KLeoQDGxnoocpah6kwwZNsJZ_asDSirsbFaz9Ik', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01198b70>
ctx = None

    def test_messages_tracked_message_sendlater(user_woody, woodys_public_toybox, message_factory, ctx):
        message_factory(user_woody, woodys_public_toybox, delay=1)
    
        sleep(1.5)
    
        msg_stats = user_stats(user_woody.token, ctx)['user_stats']['messages_sent']
    
>       assert len(msg_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:147: AssertionError
_____________________ test_messages_tracked_message_senddm _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jk0MmQtYThiMS00NTZhLWJkNzktYjJjYTlmNWY3Yjk3In0.qO-5gCJCNMFtOHKD-5r4gFxt4BC05o_dZDAfp7qXedg', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a01246ea0>
ctx = None

    def test_messages_tracked_message_senddm(user_woody, woody_and_buzz_dm, message_factory, ctx):
        message_factory(user_woody, woody_and_buzz_dm)
    
        msg_stats = user_stats(user_woody.token, ctx)['user_stats']['messages_sent']
    
>       assert len(msg_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:157: AssertionError
__________________ test_messages_tracked_message_senddmlater ___________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...GYwZGEtZDQyNi00NDQ5LTkzMTktNTE5ZGFkN2FlZTlhIn0.rKYKRayxFf22AValeG2FTUcMYX7vYCIngoMsKNJ4U2w', handle_str='sheriffwoody')
woody_and_buzz_dm = DM(owner=1, members=[2], name='buzzlightyear, sheriffwoody', dm_id=1)
message_factory = <function message_factory.<locals>.make_message at 0x7f6a0110ebf8>
ctx = None

    def test_messages_tracked_message_senddmlater(user_woody, woody_and_buzz_dm, message_factory, ctx):
        message_factory(user_woody, woody_and_buzz_dm, delay=1)
    
        sleep(1.5)
    
        msg_stats = user_stats(user_woody.token, ctx)['user_stats']['messages_sent']
    
>       assert len(msg_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:169: AssertionError
_____________________ test_messages_tracked_message_share ______________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jVjMjQtZTNmNi00YTI0LThkZjUtZTk0NjFlYmQ5NjUxIn0.egrmSJ1qlvmoLtX4IGN4731vK42mlw2N8zd2dBJorgI', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
message_factory = <function message_factory.<locals>.make_message at 0x7f6a010b4620>
ctx = None

    def test_messages_tracked_message_share(user_woody, woodys_public_toybox, message_factory, ctx):
        a_msg = message_factory(user_woody, woodys_public_toybox)
        message_share(user_woody.token, a_msg.message_id, '', woodys_public_toybox.channel_id, -1, ctx)
    
        msg_stats = user_stats(user_woody.token, ctx)['user_stats']['messages_sent']
    
>       assert len(msg_stats) == 3
E       assert 1 == 3
E         +1
E         -3

http_tests/stats_tests/test_user_stats.py:180: AssertionError
_____________________ test_messages_tracked_standup_finish _____________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...jViMTUtMDQ4ZS00MmQ1LTk3MzYtYzgxOTQzMTQxMTAzIn0.1JYNAHyX74KWPvrOYRZQn9ZZUCeJgWBMq22UBrbUNRs', handle_str='sheriffwoody')
woodys_public_toybox = Channel(name='woodys toybox', is_public=True, channel_id=1, owner_members=[1], all_members=[])
standup_factory = <function standup_factory.<locals>.make_standup at 0x7f6a01246950>
ctx = None

    def test_messages_tracked_standup_finish(user_woody, woodys_public_toybox, standup_factory, ctx):
        standup_factory(user_woody, woodys_public_toybox, 1)
        standup_send(user_woody.token, woodys_public_toybox.channel_id, 'hi', ctx)
    
        sleep(1.5)
    
        msg_stats = user_stats(user_woody.token, ctx)['user_stats']['messages_sent']
    
>       assert len(msg_stats) == 2
E       assert 1 == 2
E         +1
E         -2

http_tests/stats_tests/test_user_stats.py:193: AssertionError
___________________________ test_involvement_tracked ___________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...WZhN2EtZTg2OS00NWMxLTg3MTYtOTI1ZTYxZjRkNTAyIn0.i7XvdyJsiEBI6tQf-Cv8yGj8bqTW-6yndtFHz4aXGh0', handle_str='sheriffwoody')
user_zerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', name_first='lord', name_last='zerg', u_id=2, token=...zdhOTNlY2ItODUwZC00YjdiLWI3YjctNmJjZjcwODU3MTg3In0.Q3whMVUOc0hTb3_oxlCmPnFQlkfkXO2WomLWNGJ8xGs', handle_str='lordzerg')
channel_factory = <function channel_factory.<locals>.make_channel at 0x7f6a011987b8>
ctx = None

    def test_involvement_tracked(user_woody, user_zerg, channel_factory, ctx):
>       stats = user_stats(user_woody.token, ctx)['user_stats']

http_tests/stats_tests/test_user_stats.py:199: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DU0OGYtNWVhYS00OGI4LThjOGUtNjdhOTAxNDQ4ODI5In0.fA7R3KjTvxp-DpEdcFMA_Qko63jE-EJ-uZvD1WgmL-U', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_stats(user_woody.token, ctx)

http_tests/stats_tests/test_user_stats.py:216: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:57: in user_stats
    token=token
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [500]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
            raise error.InputError()
        elif res.status_code == 403:
            raise error.AccessError()
        else:
>           raise error.InputError(res)
E           http_tests.error.InputError: 400 Bad Request: <Response [500]>

http_tests/fakepi/util.py:73: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...DdiYWMtODJmMC00NDY5LWI0YzYtYTRiYTFkOGM3YTM3In0.yTM1oUuNljh-hasP7qtlSrorzRS8Dc7A62vDkjp3rdQ', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile(user_woody.token, user_woody.u_id, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/user_tests/test_user_profile.py:29: Failed
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...mI0ZjgtZDRmNS00ZWQ4LTkyYmEtMGU4ZWFmYTY0NjNjIn0.EuXuSzOCC-fQ_rmgVLZ_A2R8x_y-hOt2rjiT-Lt2fjk', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_setemail(user_woody.token, user_woody.email, ctx)

http_tests/user_tests/test_user_profile_setemail.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:35: in user_profile_setemail
    token=token, email=email
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...TIyMWItZWYyMS00ODk2LTljZWQtZDM5NGJmNDVhOTAzIn0.6U_f6_J_M1BDXHoTiGNxiQg45cblcrlTdHbEbJCzCIY', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_sethandle(user_woody.token, user_woody.handle_str, ctx)

http_tests/user_tests/test_user_profile_sethandle.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
http_tests/fakepi/user.py:46: in user_profile_sethandle
    token=token, handle_str=handle_str
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parse_response(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           http_tests.error.InputError: 400 Bad Request: None

http_tests/fakepi/util.py:69: InputError
______________________________ test_invalid_token ______________________________

user_woody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', name_first='sheriff', name_last='woody', u_id=1, token=...zM1OWYtMzk3NC00ZmVmLTgyZjItMmUyNzc4YjIxM2IxIn0.bUMRZpbD_loWHrJzWl_F_r_m4Ch8_M-UZyLczAGEmus', handle_str='sheriffwoody')
ctx = None

    def test_invalid_token(user_woody, ctx):
        auth_logout(user_woody.token, ctx)
        with pytest.raises(AccessError):
>           user_profile_setname(user_woody.token, user_woody.name_last, user_woody.name_first, ctx)
E           Failed: DID NOT RAISE <class 'http_tests.error.AccessError'>

http_tests/user_tests/test_user_profile_setname.py:31: Failed
=========================== short test summary info ============================
FAILED http_tests/admin_tests/test_admin_user_remove.py::test_removal_can_do_no_action
FAILED http_tests/auth_tests/test_auth_login.py::test_can_have_two_sessions
FAILED http_tests/auth_tests/test_auth_logout.py::test_not_logged_in_logout
FAILED http_tests/auth_tests/test_passwordreset_request.py::test_password_request_logs_out_everywhere
FAILED http_tests/channel_tests/test_channel_details.py::test_member_successful
FAILED http_tests/channel_tests/test_channel_messages.py::test_over_fifty_messages_sent
FAILED http_tests/channels_tests/test_channels_listall.py::test_when_one_channel_exists_private
FAILED http_tests/channels_tests/test_channels_listall.py::test_when_multiple_channels_exist
FAILED http_tests/dm_tests/test_dm_create.py::test_invalid_token - http_tests...
FAILED http_tests/dm_tests/test_dm_remove.py::test_removal_removes_messages
FAILED http_tests/message_tests/test_message_meta.py::test_message_ids_unique
FAILED http_tests/message_tests/test_message_react.py::test_successful_react_in_channel
FAILED http_tests/message_tests/test_message_react.py::test_successful_react_to_dm_message
FAILED http_tests/message_tests/test_message_react.py::test_cant_react_twice
FAILED http_tests/message_tests/test_message_react.py::test_nonmember_cannot_react
FAILED http_tests/message_tests/test_message_react.py::test_invalid_token - h...
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[True]
FAILED http_tests/message_tests/test_message_share.py::test_successful_cross_share[False]
FAILED http_tests/message_tests/test_message_share.py::test_cannot_share_to_unjoined_dm
FAILED http_tests/message_tests/test_message_unreact.py::test_successful_unreact_in_channel
FAILED http_tests/message_tests/test_message_unreact.py::test_successful_unreact_to_dm_message
FAILED http_tests/message_tests/test_message_unreact.py::test_invalid_react_id
FAILED http_tests/message_tests/test_message_unreact.py::test_cant_unreact_twice
FAILED http_tests/message_tests/test_message_unreact.py::test_nonmember_cannot_unreact
FAILED http_tests/message_tests/test_message_unreact.py::test_invalid_token
FAILED http_tests/other_tests/test_clear.py::test_clear_works - AssertionErro...
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_senddm_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_tag_thru_message_sendlaterdm_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[ch]
FAILED http_tests/other_tests/test_notifications_get.py::test_react_triggers_notification[dm]
FAILED http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_create_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_add_thru_dm_invite_triggers_notification
FAILED http_tests/other_tests/test_notifications_get.py::test_most_recent_20_notifications_fetched
FAILED http_tests/other_tests/test_notifications_get.py::test_invalid_token
FAILED http_tests/other_tests/test_search.py::test_no_matches - KeyError: 'me...
FAILED http_tests/other_tests/test_search.py::test_single_match - KeyError: '...
FAILED http_tests/other_tests/test_search.py::test_multiple_matches - KeyErro...
FAILED http_tests/other_tests/test_search.py::test_multiple_channels_joined
FAILED http_tests/other_tests/test_search.py::test_search_includes_only_joined_channels
FAILED http_tests/other_tests/test_search.py::test_search_matches_more_than_just_authorised_user
FAILED http_tests/other_tests/test_search.py::test_invalid_search[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa]
FAILED http_tests/other_tests/test_search.py::test_invalid_token - Failed: DI...
FAILED http_tests/stats_tests/test_user_stats.py::test_return_type_correct - ...
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channels_create
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_join
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_invite
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_leave
FAILED http_tests/stats_tests/test_user_stats.py::test_channels_tracked_channel_add_owner
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_create
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_invite
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_leave
FAILED http_tests/stats_tests/test_user_stats.py::test_dms_tracked_dm_remove
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_send
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_sendlater
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddm
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_senddmlater
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_message_share
FAILED http_tests/stats_tests/test_user_stats.py::test_messages_tracked_standup_finish
FAILED http_tests/stats_tests/test_user_stats.py::test_involvement_tracked - ...
FAILED http_tests/stats_tests/test_user_stats.py::test_invalid_token - http_t...
FAILED http_tests/user_tests/test_user_profile.py::test_invalid_token - Faile...
FAILED http_tests/user_tests/test_user_profile_setemail.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_sethandle.py::test_invalid_token
FAILED http_tests/user_tests/test_user_profile_setname.py::test_invalid_token
============ 64 failed, 257 passed, 22 skipped in 67.29s (0:01:07) =============
